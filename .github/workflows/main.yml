name: Extract code and references from GameCube games.

on:
  push:
    branches:
      - "**"  # Runs on every commit on any branch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Get_GC_CODE_DATA:
    runs-on: ubuntu-latest

    steps:
      - name: Setup env
        run: |
          export $(dbus-launch)
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          export XDG_RUNTIME_DIR=/tmp/runtime-user
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          echo "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" >> $GITHUB_ENV
          wget https://github.com/Moddimation/OP_GC_EXE_ALL_SCRIPT/raw/ae428a20d8b19cc1d9ee053b1670fabe23aba12b/orthrus-linux-x86_64.zip
          7z x orthrus-linux-x86_64.zip
          rm orthrus-linux-x86_64.zip -f
          chmod +x orthrus
          echo " " > gameList

     # - name: Install dependencies
      #  run: |
       #   sudo apt-get update && sudo apt-get install -y p7zip-full
        #  sudo apt install flatpak
         # sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          #sudo flatpak install flathub org.DolphinEmu.dolphin-emu -y

      - name: Downloads & Extracts
        run: |
            filterDelete() {
              find . -type f \( -iname "*.tpl" -o -iname "*.lsb" -o -iname "*.mhp" -o -iname "*.drs" -o -iname "*.evd" -o -iname "*.fnt" -o -iname "*.rby" -o -iname "*.emd" -o -iname "*.rdt" -o -iname "*.tim" -o -iname "*.adx" -o -iname "*.gma" -o -iname "*.vtx" -o -iname "*.*gfx*" -o -iname "*.gcp" -o -iname "*.lfh" -o -iname "*.lfa" -o -iname "*.lfg" -o -iname "*.bnk" -o -iname "*.dtm" -o -iname "*anim*" -o -iname "*.tga" -o -iname "*.shf" -o -iname "*.shg" -o -iname "*.gct" -o -iname "*.ngc" -o -iname "*.gsf" -o -iname "*.spt" -o -iname "*.loc" -o -iname "*.gdf" -o -iname "*.tex" -o -iname "*.bmd" -o -iname "*.*pcm*" -o -iname "*.mid" -o -iname "*.dsp" -o -iname "vssver.scc" -o -iname "*.gct" -or -iname "*.gfn" -or -iname "*.bnr" -or -iname "*.h4m" -or -iname "*.sni" -or -iname "*.gsf" -or -iname "*.zsd" -or -iname "*.thp" -or -iname "*.mpc" -or -iname "*.bmd" -or -iname "*.fpk" -or -iname "*.viv" -or -iname "*.ngc" -or -iname "*.div" -or -iname "*.vid" -or -iname "*.vp*" -or -iname "*.sp" -or -iname "*.str" -or -iname "*.mus" -or -iname "*.flo" -or -iname "*.exa" -or -iname "*.ssd" -or -iname "*.sbf" -or -iname "*.spe" -or -iname "*.dat" -or -iname "*.sdt" -or -iname "*.lmp" -or -iname "*.feb" -or -iname "*.bin" -or -iname "*.dat" -or -iname "*.obj" -or -iname "*.lfb" -or -iname "*.med" -or -iname "*.samp"  -or -iname ".bnk" -or -iname "*.dsp" -or -iname "*.gsh" -or -iname "*.fsh" -or -iname "*.vsh" -or -iname "*.big" -or -iname *.abg -or -iname "*.bad" -or -iname "*.add" -o -iname "*.adb" -o -iname "*.fs" \) | xargs -I "{}" mv "{}" "../tmp/" 2>/dev/null
            }
            filterFind() {
              find . -type f -exec grep -ELis "0x[0-9a-fA-F]{8,}|ppceabi|metrotrk|metrowerks|msl_c|section layout|3DPanel|.text|.data|.rodata|.sbss|.bss|([a-z_$@.-]|[A-Z_$@.-]){5,}\.(cpp|hpp|a|o|c|h)[^a-zA-Z]$" "{}" \; | xargs -I "{}" mv "{}" "../$file_name/files/" > /dev/null 2>&1
            }
            filterExt() {
              find . -type f ! \( -iname "*.dmp" -o -iname "*.fld*" -o -iname "*.run" -o -iname "*.xls*" -o -iname "*.bpr*" -o -iname "*.ddf*" -o -iname "*.mdl*" -o -iname "*.img*" -o -iname "*.map*" -o -iname "*.rel*" -o -iname "*.elf*" -o -iname "*.exe*" -o -iname "*.txt*" -o -iname "*.dol*" -o -iname "*.*sym*" -o -iname "*.lua*" -o -iname "*.rso*" -o -iname "*.csv*" -o -iname "*.dlf*" -o -iname "*.sh" -o -iname "*.sav*" -o -iname "*.tdf*" -o -iname "*.inf*" -o -iname "*.bat*" -o -iname "*readme*" -o -iname "*.doc*" -o -iname "*.cfg*" -o -iname "*.s" -o -iname "*.s.*" -o -iname "*.c" -o -iname "*.c.*" -o -iname "*.h" -o -iname "*.h.*" -o -iname "*.cpp" -o -iname "*.hpp" -o -iname "*.o" -o -iname "*.o.*" -o -iname "*.a" -o -iname "*.a.*" -o -iname "*.flb*" -o -iname "*.xml*" -o -iname "*.so" -o -iname "*.dll*" -o -iname "*.*log*" -o -iname "*.ini*" -o -iname "*.pdf*" -o -iname "*.yml*" -o -iname "*.yaml*" -o -iname "*.json*" -or -iname "*.py" -or -iname "*.exe*" -o -iname "*makefile*" -o -iname "*cmake*" -o -iname "*.sln*" -o -iname "*vsproj*" -o -iname "*.mak" -o -iname "*.mk" \) | xargs -I "{}" mv "{}" "../tmp/" 2>/dev/null
            }
            filterTextFiles() {
              find . -type f \( -iname "*.csv" -o -iname "*.txt" -o -iname "*.log" -o -iname "*.cfg" -o -iname "*.xml" -o -iname "*.ini" -o -iname "*.inf" -o -iname "*.map" \)  -exec grep -ELis "__start|msl_c|MetroTRK|jsystem|([a-z_.-]|[A-Z_.-]){6,}\.(cpp|hpp|a|o|c|h)[^a-zA-Z]$|section layout|\.text|.rodata|.bss|.sbss" "{}" \; | xargs -I "{}" mv "{}" "../tmp/" 2>/dev/null
            }
            dolphinTool() {
              flatpak run --command="dolphin-tool" --filesystem host org.DolphinEmu.dolphin-emu
            }
            export link="https://myrient.erista.me/files/Redump/Nintendo%20-%20GameCube%20-%20NKit%20RVZ%20%5Bzstd-19-128k%5D"
  
            echo "# Getting index ..."
            wget -q "$link/"
            echo "# OK, now index for filenames, download and process everything ..."
            grep -oP '(?<=href=")[^"]*\.zip' index.html >> gameList
            rm index.html
            folderNum="$(cat gameList | wc -l)"
            echo "# Number of games: $folderNum"

            # Set the time limit (in seconds, 5 hours = 18000 seconds)
            time_limit=300
            start_time=$(date +%s)  # Get the current time in seconds

            while (true); do
            # Get the current time in seconds
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))  # Calculate elapsed time
            
            if [ $elapsed_time -ge $time_limit ]; then
              echo "Time limit reached. Skipping iteration $i and moving to the next step."
              break  # Exit the loop if time limit is exceeded
            fi

            zip_file=$(cat gameList | head -n 1 2>/dev/null)
            sed -i '1d' gameList
            if [[ "$zip_file" == *"Action"*"Replay"* ]]; then
              continue;
            fi
            wget -q "$link/$zip_file"
            filename=$(ls *.zip 2>/dev/null | head -n 1) 2>/dev/null
            file_name="${filename%.zip}"
            echo ">> Fetching next game ..."
            echo "   Name: $file_name"
            mkdir "$file_name"
            echo " # Extracting download ..."
            7z x "$filename" -y -bso0 -bsp0 -bse0
            rm "$filename"
            rvz_file=$(ls *.rvz | head -n 1)
            echo " # Extracting game ..."
            dolphinTool extract -i "$rvz_file" -o "$file_name/" -q 2>/dev/null || true
            rm "$rvz_file"
            echo " # Run filter ..."
            echo "  # Scan for sub archives ..."
            rm -rf tmp
            mkdir -p tmp
            cd "$file_name"
            filterDelete || true
            for i in 1 2 3; do
              echo "   # Scan iteration $i";
              find "." -empty -delete;
              find "." -type f ! \( -ipath "*mission*" -o -ipath "*room*" \) | while read -r possible_archive_file; do
                sub_file_name="$(basename "$possible_archive_file" | sed 's/\.[^.]*$//')"
                echo "   - Trying '$possible_archive_file' ..."
                mkdir "./files/$sub_file_name.d" -p
                dolphinTool extract -i "$possible_archive_file" -o "files/$sub_file_name.d" 2>/dev/null || true
                dec_file="../tmp/CURRENT_POSSIBLE_ARCHIVE"
                extracted_dir="./files/$sub_file_name.d"
                rm -f "$dec_file" 2>/dev/null || true
                ../orthrus ncompress yay0 -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true
                ../orthrus ncompress yaz0 -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true
                ../orthrus panda3d bam -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus panda3d multifile -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus jsystem rarc -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus godot pck -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                cp -f "$dec_file" "$possible_archive_file" 2>/dev/null || true;
               # dtk rarc extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
               # dtk u8 extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
               # dtk wad extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
                tar -xf "$possibble_archive_file" -C "$extracted_dir" > /dev/null 2>&1 || true;
                7z x "$possible_archive_file" -o"$extracted_dir" > /dev/null 2>&1 || true;
                if [ -z "$(ls -A "$extracted_dir")" ]; then
                    # echo "   ! No data found, continue";
                    rmdir "$extracted_dir";
                    mv "filename.szs" "${filename%.szs}" > /dev/null 2>&1;
                    continue;
                fi;
                ls "$extracted_dir";
                rm "$possible_archive_file";
                echo "   # Extracted sub-archive: $possible_archive_file" #;
              done;
            done;
            pathMainD="$(find . -type d -name "main.d")";
            if ! [ -z "$pathMainD" ]; then
               if [ -z "$(cmp "$pathMainD/sys/main.dol" "./sys/main.dol")" ]; then
                   cp -rf "$pathMainD/*" ".";
                   rm -rf "$pathMainD"
               fi
            fi;
            echo "  # Cutting files ...";
            filterDelete || true;
            filterExt || true;
            filterTextFiles || true;
            cd "../tmp/";
            echo " # Post-Processing ...";
            filterFind;
            found=$(find "../$file_name/" -type f | awk -F. '{if (NF>1) print $NF}' | sort -u | paste -sd "," - ); 
            find "../$file_name/" -empty -delete;
            if rmdir "../$file_name" 2>/dev/null; then
               echo " ! No code data found.";
               echo "   Continuing, all size: $(du -sh . | awk '{print $1}')";
               cd ..;
               rm -rf "$file_name";
               continue;
            fi;
            find "." -empty -delete;
            ignored=$(find . -type f | awk -F. '{if (NF>1) print $NF}' | sort -u | paste -sd "," - ); 
            cd "..";
            rm -rf tmp;
            echo "<< Finished '$file_name'";
            echo "   Ignored:";
            echo "$ignored";
            echo "   Found:";
            echo "$found";
            echo " # Continuing, size: $(du -sh "$file_name" | awk '{print $1}') / $(du -sh . | awk '{print $1}')"
            done
      - name: Compress
        if: success()  # Only list contents if extraction succeeded
        run: |
          7z a -v4900M BundleGC.7z ./*
          sudo rm -rf ./*/

      - name: Upload file list
        uses: actions/upload-artifact@v4
        with:
          name: BundleGC
          path: BundleGC.7z.*

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_COMMIT }}

      - name: Copy gameList to Repository
        run: |
          cp gameList .  # Copy the updated file to the root of the repo

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Commit and Push Changes
        env:
          GH_COMMIT: ${{ secrets.GH_COMMIT }}
        run: |
          git add gameList
          git commit -m "Automated commit: Updating gameList"
          git push https://x-access-token:$GH_COMMIT@github.com/${{ github.repository }}.git HEAD:main

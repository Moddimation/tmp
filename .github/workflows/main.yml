Skip to content
Navigation Menu
Moddimation
tmp
 
Type / to search
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
tmp/.github/workflows
/

in
main

Edit

Preview
Indent mode

Indent size

Line wrap mode

Editing main.yml file contents
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
name: Download, Extract, and List Contents of 7z File

on:
  workflow_dispatch:

jobs:
  download_extract_list:
    runs-on: ubuntu-latest

    steps:
    - name: Prepare
      run: |
        sudo apt-get update && sudo apt-get install -y p7zip-full
        sudo apt install flatpak
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        sudo flatpak install flathub org.DolphinEmu.dolphin-emu -y

    - name: Downloads & extract
      run: |
        mkdir tmp
        wget https://myrient.erista.me/files/Redump/Nintendo%20-%20GameCube%20-%20NKit%20RVZ%20%5Bzstd-19-128k%5D/
        export link_prefix="https://myrient.erista.me/files/Redump/Nintendo%20-%20GameCube%20-%20NKit%20RVZ%20%5Bzstd-19-128k%5D"
        cat index.html | grep .zip | sed 's/\" title.*//' | sed 's/.*href=\"//'  | sed 's/.*href=\"//' | while read -r zip_file; do
            echo "$zip_file" && \
            wget -q "$link_prefix/$zip_file" && \
            file_name="${*%.zip}" && \
            find *.zip && \
            7z x *.zip && rm *.zip && \
            file_name="${*%.rvz}" && \
            ls && \
            rvz_file=$(ls *.rvz)  
            flatpak run --command="dolphin-tool" org.DolphinEmu.dolphin-emu extract -i "$PWD/$rvz_file" -o "$PWD/$file_name/"
            rm *.rvz
            cd "$file_name" && \
            cd - && ls && echo lmao && ls .. && \
            echo $file_name && \
            find . -type f \( -name "*dbg*" -o -name "*debug*" -o -name "*.map" -o -name "*.rel" -o -name "*.elf" -o -name "*.txt" -o -name "*.ini" \) -exec mv {} ../tmp \; && sudo rm -rf ./*
            sudo rm -rf ./* && \
            mv ../tmp/* . \
            find . && \
            cd ..
        done
        find .
    - name: Compress
      if: success()  # Only list contents if extraction succeeded
      run: |
        7z a BundleGC.7z ./*
        sudo rm ./*/ -rf

    - name: Upload file list
      if: success()  # Only upload if previous steps succeeded
      uses: actions/upload-artifact@v4
      with:
        name: BundleGC
        path: BundleGC.7z

Use Control + Shift + m to toggle the tab key moving focus. Alternatively, use esc then tab to move to the next interactive element on the page.
Use Control + Space or Option + Space to trigger autocomplete in most situations.
Help Panel navigation
Marketplace
Documentation
Getting started with a workflow

To help you get started, this guide shows you some basic examples. For the full GitHub Actions documentation on workflows, see "Configuring workflows."

Customizing when workflow runs are triggered

Set your workflow to run on push events to the main and release/* branches

on:
  push:
    branches:
    - main
    - release/*
Set your workflow to run on pull_request events that target the main branch

on:
  pull_request:
    branches:
    - main
Set your workflow to run every day of the week from Monday to Friday at 2:00 UTC

on:
  schedule:
  - cron: "0 2 * * 1-5"
For more information, see "Events that trigger workflows."

Manually running a workflow

To manually run a workflow, you can configure your workflow to use the workflow_dispatch event. This enables a "Run workflow" button on the Actions tab.

on:
  workflow_dispatch:
For more information, see "Manually running a workflow."

Running your jobs on different operating systems

GitHub Actions provides hosted runners for Linux, Windows, and macOS.

To set the operating system for your job, specify the operating system using runs-on:

jobs:
  my_job:
    name: deploy to staging
    runs-on: ubuntu-22.04
The available virtual machine types are:

ubuntu-latest, ubuntu-22.04, or ubuntu-20.04
windows-latest, windows-2022, or windows-2019
macos-latest, macos-13, or macos-12
For more information, see "Virtual environments for GitHub Actions."

Using an action

Actions are reusable units of code that can be built and distributed by anyone on GitHub. You can find a variety of actions in GitHub Marketplace, and also in the official Actions repository.

To use an action, you must specify the repository that contains the action. We also recommend that you specify a Git tag to ensure you are using a released version of the action.

- name: Setup Node
  uses: actions/setup-node@v4
  with:
    node-version: '20.x'
For more information, see "Workflow syntax for GitHub Actions."

Running a command

You can run commands on the job's virtual machine.

- name: Install Dependencies
  run: npm install
For more information, see "Workflow syntax for GitHub Actions."

Running a job across a matrix of operating systems and runtime versions

You can automatically run a job across a set of different values, such as different versions of code libraries or operating systems.

For example, this job uses a matrix strategy to run across 3 versions of Node and 3 operating systems:

jobs:
  test:
    name: Test on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ['18.x', '20.x']
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node_version }}

    - name: npm install, build and test
      run: |
        npm install
        npm run build --if-present
        npm test
For more information, see "Workflow syntax for GitHub Actions."

Running steps or jobs conditionally

GitHub Actions supports conditions on steps and jobs using data present in your workflow context.

For example, to run a step only as part of a push and not in a pull_request, you can specify a condition in the if: property based on the event name:

steps:
- run: npm publish
  if: github.event_name == 'push'
For more information, see "Contexts and expression syntax for GitHub Actions."

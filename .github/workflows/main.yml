
name: Extract code and references from Wii games.

on:
  push:
    branches:
      - "**"  # Runs on every commit on any branch

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Get_WII_CODE_DATA:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_COMMIT }}

      - name: Setup env
        run: |
          export $(dbus-launch)
          echo "DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS" >> $GITHUB_ENV
          export XDG_RUNTIME_DIR=/tmp/runtime-user
          mkdir -p $XDG_RUNTIME_DIR
          chmod 700 $XDG_RUNTIME_DIR
          echo "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          wget https://github.com/encounter/decomp-toolkit/releases/download/v1.4.1/dtk-linux-x86_64
          wget https://github.com/Moddimation/OP_GC_EXE_ALL_SCRIPT/raw/ae428a20d8b19cc1d9ee053b1670fabe23aba12b/orthrus-linux-x86_64.zip
          7z x orthrus-linux-x86_64.zip
          rm orthrus-linux-x86_64.zip -f
          mv dtk* dtk
          chmod +x orthrus
          chmod +x dtk
          sudo apt-get update
          sudo apt install -y p7zip-full flatpak unp
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install flathub org.DolphinEmu.dolphin-emu -y

      - name: Downloads & Extracts
        run: |
            check=true
            set +e
            export link="https://myrient.erista.me/files/Redump/Nintendo%20-%20Wii%20-%20NKit%20RVZ%20%5Bzstd-19-128k%5D"
            filterDelete() {
              find . -type f \( \
                  -ipath "*scaleform*" -o -ipath "*LEVEL*.plf" -o -iname "*.fon" -o -iname "*.dir" -o -name "BOOT2*" -o -iname "__*.inf.*" -o -iname "*.cam" -o -iname "*.scn" -o -iname "*.anm" -o -iname "*.skl" -o -iname "*.txs" -o -iname "*.mat" -o -iname "*.msh" -o -iname "*.mdl" -o -iname "*.lang" -o -ipath "*HomeBtn*" -o -ipath "*HomeMenu*" -o -ipath "*HomeButton*" -o -name "*HADE-*" -o -name "*HAJE-*" -o -name "*HATE-*" -o -name "*HAPE-*" -o -iname "*.brlyt" -o -iname "*.breff" -o -iname "*.sklrbt*" -o -iname "*.gpseq" -o -iname "*.beat" -o -iname "*.tni" -o -iname "*.rbh" -o -iname "*.asb" -o -iname "*.apr" -o -iname "*.fsb" -o -iname "*.jpeg" -o -iname "*.jpg" -o -iname "*.png" -o -iname "*.bmp" -o -iname "*.mp3" -o -iname "*.mp4" -o -iname "*.flac" -o -iname "*.wav" -o -iname "*.ogg" -o -iname "*.pcm" -o -iname "*.wt" -o -iname "*.bwav" -o -iname "*.brres" -o -iname "*.brstm" -o -name "RVL*.wad" -o -name "IOS*.wad" -o -iname "*.dsf" -o -iname "*.gcr" -o -iname "*.ghr" -o -iname "*.cct" -o -iname "*.cad" -o -iname "*.cas" -o -iname "*.sdir" -o -iname "*.acc" -o -iname "*.aco" -o -iname "*.acp" -o -iname "*.act" -o -iname "*.ggf" -o -iname "*.p3d" -o -iname "*.tpl" -o -iname "*.lsb" -o -iname "*.mhp" -o -iname "*.drs" -o -iname "*.evd" -o -iname "*.fnt" -o -iname "*.rby" -o -iname "*.emd" -o -iname "*.rdt" -o -iname "*.tim" -o -iname "*.adx" -o -iname "*.gma" -o -iname "*.vtx" -o -iname "*.*gfx*" -o -iname "*.gcp" -o -iname "*.lfh" -o -iname "*.lfa" -o -iname "*.lfg" -o -iname "*.bnk" -o -iname "*.dtm" -o -iname "*anim*" -o -iname "*.tga" -o -iname "*.shf" -o -iname "*.shg" -o -iname "*.gct" -o -iname "*.ngc" -o -iname "*.gsf" -o -iname "*.spt" -o -iname "*.loc" -o -iname "*.gdf" -o -iname "*.tex" -o -iname "*.bmd" -o -iname "*.*pcm*" -o -iname "*.mid" -o -iname "*.dsp" -o -iname "vssver.scc" -o -iname "*.gfn" -o -iname "*.bnr" -o -iname "*.h4m" -o -iname "*.sni" -o -iname "*.zsd" -o -iname "*.thp" -o -iname "*.mpc" -o -iname "*.fpk" -o -iname "*.viv" -o -iname "*.div" -o -iname "*.vid" -o -iname "*.vp*" -o -iname "*.sp" -o -iname "*.str" -o -iname "*.mus" -o -iname "*.flo" -o -iname "*.exa" -o -iname "*.ssd" -o -iname "*.sbf" -o -iname "*.spe" -o -iname "*.dat" -o -iname "*.sdt" -o -iname "*.lmp" -o -iname "*.feb" -o -iname "*.bin" -o -iname "*.obj" -o -iname "*.lfb" -o -iname "*.med" -o -iname "*.samp" -o -iname "*.dsp" -o -iname "*.gsh" -o -iname "*.fsh" -o -iname "*.vsh" -o -iname "*.big" -o -iname "*.abg" -o -iname "*.bad" -o -iname "*.add" -o -iname "*.adb" -o -iname "*.fs" \
              \) | xargs -I "{}" mv -t "../tmp/" "{}" 2>/dev/null
            }
            filterFind() {
              find . -type f -exec grep -El "__start|ppceabi|PPCEABI|PowerPC|MetroTRK|J3DModel|J2DScreen|J2DPrint|JUTException|JAInterface|JAIBasic|JAISound|JKRAram|JUTFont|JAudio|Jaudio|J2DWindow|JKRHap|Jsystem|JSystem|[a-zA-Z_-]{7,}\.(cpp|hpp|a|o|c|h)[^a-zA-Z%\!\$&=;,:._-]$" "{}" \; \
                 | xargs -I "{}" mv "{}" "../$file_name/files/" 2>/dev/null
            }
            filterExt() {
              find . -type f \
                 ! \( -iname "*.rsf" -o -iname "*.dmp" -o -iname "*.fld*" -o -iname "*.run" -o -iname "*.xls*" -o -iname "*.bpr*" -o -iname "*.plf" -o -iname "*.ddf*" -o -iname "apploader.img" -o -iname "*.map*" -o -iname "*.rel*" -o -iname "*.ddf*" -o -iname "*.elf*" -o -iname "*.exe*" -o -iname "*.txt*" -o -iname "*.dol*" -o -iname "*.*sym*" -o -iname "*.lua*" -o -iname "*.rso*" -o -iname "*.csv*" -o -iname "*.sh" -o -iname "*.sav*" -o -iname "*.tdf*" -o -iname "*.inf*" -o -iname "*.bat*" -o -iname "*readme*" -o -iname "*.doc*" -o -iname "*.cfg*" -o -iname "*.s" -o -iname "*.s.*" -o -iname "*.c" -o -iname "*.c.*" -o -iname "*.cs" -o -iname "*.cs.*" -o -iname "*.h" -o -iname "*.h.*" -o -iname "*.cpp*" -o -iname "*.hpp*" -o -iname "*.o" -o -iname "*.o.*" -o -iname "*.a" -o -iname "*.a.*" -o -iname "*.flb*" -o -iname "*.xml*" -o -iname "*.so" -o -iname "*.dll*" -o -iname "*.*log*" -o -iname "*.ini*" -o -iname "*.pdf*" -o -iname "*.yml*" -o -iname "*.yaml*" -o -iname "*.json*" -o -iname "*.py" -o -iname "*.exe*" -o -iname "*makefile*" -o -iname "*cmake*" -o -iname "*.sln*" -o -iname "*vsproj*" -o -iname "*.mak" -o -iname "*.mk" \) \
                 -o \( -path "*/svn*" -o -path "*/CVS*" \) \
                 | xargs -I "{}" mv "{}" "../tmp/" 2>/dev/null
            }
            filterTextFiles() {
              find . -type f \( -iname "*.lua" -o -iname "*.csv" -o -iname "*.txt" -o -iname "*.log" -o -iname "*.cfg" -o -iname "*.xml" -o -iname "*.ini" -o -iname "*.inf" -o -iname "*.map" \) | while read -r file; do
                if file "$file" | grep -qiE 'text|ascii|unicode|utf-8|utf8|shiftjis|shift-jis|euc-jp|latin|big5'; then
                  if ! grep -aEL "__start|ppceabi|PPCEABI|PowerPC|MetroTRK|J3DModel|J2DScreen|J2DPrint|JUTException|JAInterface|JAIBasic|JAISound|JKRAram|JUTFont|JAudio|Jaudio|J2DWindow|JKRHap|Jsystem|JSystem|[a-zA-Z_-]{7,}\.(cpp|hpp|a|o|c|h)[^a-zA-Z%\!\$=;,:]$|section layout|Section Layout" "$file" > /dev/null 2>&1; then
                    rm -f "$file" 2>/dev/null
                  fi
                else
                  mv "$file" "$file.b" 2>/dev/null
                fi
              done
            }
            reset() {
              rm -f gameList
              touch gameList
              echo "# Getting index ..."
              wget -q "$link/"
              echo "# OK, now index for filenames, download and process everything ..."
              grep -oP '(?<=href=")[^"]*\.zip' index.html >> gameList
              rm index.html
              exit 0
            }
            timeCheck() {
              #echo "DEBUG SESSION!"
              # Set the time limit (in seconds, 5 hours = 18000 seconds)
              time_limit=$1

              # Get the current time in seconds
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))  # Calculate elapsed time
            
              #echo "Start: $start_time"
              #echo "Current: $current_time"
              #echo "Elapsed: $elapsed_time"
              #echo "Limit: $time_limit"
              if [ $elapsed_time -ge $time_limit ]; then
                echo " !& Time limit reached. Continuing in a new workflow ..."
                return 1 # time done
              else
               # echo "DEBUG SESSION CONTINUE!"
                return 0 # still ok
              fi
            }

            start_time=$(date +%s)  # Get the current time in seconds

            #reset

            folderNum="$(cat gameList | wc -l)"
            echo "# Number of games: $folderNum"

            while (true); do

            timeCheck 17200 || break # break if time > 5H

            if [ $(du -sb . | cut -f1) -gt $((10 * 1024 * 1024 * 1024)) ]; then
              echo " !! Space limit reached (10gb). Continuing in a new workflow ..."
              break
            fi

            zip_file=$(head -n 1 gameList)
            if [ -z "$zip_file" ]; then
              echo "All Done! be happy :D";
              break;
            fi
            sed -i '1d' gameList
            if [[ "$zip_file" == *"Action"*"Replay"* ]]; then
              continue;
            fi
            echo " >> Downloading '$(echo "$zip_file" | sed -E '
              s/%20/ /g;  s/%21/!/g;  s/%22/"/g;  s/%23/#/g;  s/%24/\$/g;
              s/%25/%/g;  s/%26/\&/g;  s/%27/'\''/g;  s/%28/(/g;  s/%29/)/g;
              s/%2A/*/g;  s/%2B/+/g;  s/%2C/,/g;  s/%2D/-/g;  s/%2E/./g;
              s/%2F/\//g; s/%3A/:/g;  s/%3B/;/g;  s/%3C/</g;  s/%3D/=/g;
              s/%3E/>/g;  s/%3F/?/g;  s/%40/@/g;  s/%5B/[/g;  s/%5C/\\/g;
              s/%5D/]/g;  s/%5E/^/g;  s/%5F/_/g;  s/%60/`/g;  s/%7B/{/g;
              s/%7C/|/g;  s/%7D/}/g;  s/%7E/~/g;
            ')'" && \

            echo " # Init extraction ... "
            wget -q "$link/$zip_file"
            #ls
            filename="$(ls *.zip 2>/dev/null | head -n 1)" 2>/dev/null
            file_name="./${filename%.zip}";
            mkdir "$file_name";

            echo " # Extracting download ..."
            7z x "$filename" -y -bso0 -bsp0 -bse0
            rm "$filename"
            rvz_file=$(ls *.rvz | head -n 1)

            echo " # Extracting game ..."
            flatpak run --command="dolphin-tool" --filesystem=host org.DolphinEmu.dolphin-emu extract -i "$rvz_file" -o "$file_name/" -q 2>/dev/null || true
            rm "$rvz_file"

            echo " # Init filter ..."
            rm -rf tmp
            mkdir -p tmp
            mkdir -p __fonts
            cd "$file_name/"

            echo " # Pre-Processing ..."
            [ "$(find . -type f -name '*.plf' | wc -l)" -gt 5 ] && find . -type f -name '*.plf' -delete

            echo " # Scanning ..."
            found_sub=false
            did_sub_abort=false
            is_sub_run_first=true
            sub_iter_num=0
            while [ "$is_sub_run_first" = true ] || { [ "$found_sub" = true ] && [ "$did_sub_abort" = false ]; }; do
              echo "   # Scan $sub_iter_num";
              found_sub=false
              sub_iter_num=$((sub_iter_num + 1));
              if [ "$is_sub_run_first" = true ]; then
                is_sub_run_first=false;
              fi

              find . -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" -o -iname "*.jpg" -o -iname "*.skl" -o -iname "*.anm" -o -iname "*.mdl" -o -iname "*.tex" \) -delete;
              
              while IFS= read -r possible_archive_file; do

                timeCheck 20000 || { did_sub_abort=true; break; }

                sub_file_name="$(basename "$possible_archive_file" | sed 's/\.[^.]*$//')"
                echo "   - Trying '$possible_archive_file' ..."
                dec_file="../tmp/CURRENT_POSSIBLE_ARCHIVE"
                extracted_dir="$possible_archive_file.d/"
                mkdir "$extracted_dir" -p
                flatpak run --command="dolphin-tool" --filesystem=host org.DolphinEmu.dolphin-emu extract -i "$possible_archive_file" -o "$extracted_dir" 2>/dev/null || true
                rm -f "$dec_file" 2>/dev/null || true
                ../orthrus ncompress yay0 -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true
                ../orthrus ncompress yaz0 -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true
                ../orthrus panda3d bam -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus panda3d multifile -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus jsystem rarc -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                ../orthrus godot pck -d "$possible_archive_file" "$dec_file" > /dev/null 2>&1 || true;
                cp -f "$dec_file" "$possible_archive_file" 2>/dev/null || true;
                ../dtk rarc extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
                ../dtk u8 extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
                ../dtk wad extract "$possible_archive_file" -o "$extracted_dir" > /dev/null 2>&1 || true;
                tar -xf "$possibble_archive_file" -C "$extracted_dir" > /dev/null 2>&1 || true;
                if ! 7z l "$possible_archive_file" 2>/dev/null | grep -E '\.(text|rodata|data|bss|symtab|strtab|debug|comment|shstrtab|ctors|dtors|sdata|sbss|got|plt)$' > /dev/null; then
                    7z x "$possible_archive_file" -o"$extracted_dir" > /dev/null 2>&1 || true
                fi
                if ! unp -l "$possible_archife_file" 2>/dev/null | grep -E '\.(text|rodata|data|bss|symtab|strtab|debug|comment|shstrtab|ctors|dtors|sdata|sbss|got|plt)$' > /dev/null; then
                    unp "$possible_archive_file" -- --out "$extracted_dir" > /dev/null 2>&1 || true
                fi
                find "." -empty -delete;
                if ! [ -d "$extracted_dir" ]; then
                    # echo "  ! No data found, continue";
                #    rmdir "$extracted_dir";
                    mv "filename.szs" "${filename%.szs}" > /dev/null 2>&1;
                    continue;
                fi;
                ls "$extracted_dir";
                rm "$possible_archive_file";
                echo "  # Extracted sub-archive: $possible_archive_file";
                found_sub=true;
                did_sub_abort=false #;
              done < <(find . -type f \
                  ! -ipath "*/sys/*" \
                  ! \( -iname "*.MWT" -o -iname "*.hdr" -o -iname "*.snd" -o -iname "*.acg" \
                       -o -iname "*.hip" -o -iname "*.hop" -o -iname "*.bik" -o -name "FILE_*" \
                       -o -iname "boot.bin" -o -iname "*.inf" -o -iname "*.ini" -o -iname "*.txt" \
                       -o -iname "*.rel" -o -iname "*.h"   -o -iname "*level*"   -o -iname "*.thp" \
                       -o -iname "*lvl"     -o -iname "*.stf"   -o -iname "*.tsc"     -o -iname "*.ani" \
                       -o -iname "*.col"    -o -iname "*scb"     -o -iname "*.adp"     -o -iname "*.all" \
                       -o -iname "*.geo"    -o -iname "vssver.scc" -o -iname "*.lvl"     -o -iname "*opening.bnr" \
                       -o -iname "*.tpl"    -o -iname "*.mtl"     -o -iname "*.bat"     -o -iname "*.map" \
                       -o -iname "*.dll"    -o -iname "*.exe"     -o -iname "*.img"     -o -iname "*.csv" \
                       -o -iname "*.elf"    -o -iname "*.dol"     -o -iname "boot.bin" \
                       -o -iname "*.xml" -o -iname "*..lua" \
                    \) )
            done;
            echo " # Checking ..."
            pathMainD="$(find . -type d -name "*.d")"
            echo "$pathMainD" | while read -r dir; do
              if [ -d "$dir" ] && [ -d "$dir/UPDATE/sys" ] && [ -e "./UPDATE/sys/main.dol" ] && [ -e "$dir/UPDATE/sys/main.dol" ]; then
                if cmp -s "$dir/UPDATE/sys/main.dol" "./UPDATE/sys/main.dol"; then
                  rm -rf "$dir/"
                fi
              fi
            done
            find . -type f \( -iname "*.ttf" -o -iname "*.ttc" -o -iname "*.ttc" \) -exec cp "{}" ../fonts \;

            echo " # Cutting ...";
            filterDelete || true;
            filterExt || true;
            filterTextFiles || true;
            cd "../tmp/";

            echo " # Post-Processing ...";
            filterTextFiles || true;
            filterFind;
            cd "../$file_name/"
            find "." -empty -delete;
            find "." -type f \( -iname "*.tgc" -o -iname "*.gcm" -o -iname "*.arc" -o -iname "*.ghr" -o -iname "*.gcr" -o -iname "__*.inf.*" -o -iname "*.wt" -o -iname "*.pcm" -o -iname "*.mid" -o -iname "*.midi" \) -delete
            #if [ -d "UPDATE" ]; then
               #find "UPDATE" -maxdepth 1 -exec mv "{}" "." \;
            #fi
            if [ -e DATA/sys/main.dol ] && [ -e UPDATE/sys/main.dol ] && cmp -s DATA/sys/main.dol UPDATE/sys/main.dol; then
              rm -rf DATA/sys
            fi

            echo " # Finishing ...";
            found=$(find "." -type f | sort -u);
            size=$(du -sh "." | awk '{print $1}')
            cd ".."
            if rmdir "./$file_name/" 2>/dev/null; then
               echo " ! No code data found.";
               echo "   Continuing, all size: $(du -sh . | awk '{print $1}')";
               rm -rf "./$file_name/";
               continue;
            fi;
            ignored=$(find "./tmp/" -type f | awk -F. '{if (NF>1) print $NF}' | sort -u | paste -sd "," - ); 
            rm -rf tmp;

            echo " << Finished '$file_name'";
            echo "   Ignored:";
            echo "$ignored";
            echo "   Found:";
            echo "$found";
            if ! [ -z "$(find "$file_name" \( -path "*CVS*" -o -path "*svn*" \) )"]; then echo "   CVS/svn preserved."; fi;
            echo " # Continuing, size: $size / $(du -sh . | awk '{print $1}')"
            done
      - name: Compress
        if: success()  # Only list contents if extraction succeeded
        run: |
          7z a -v4900M BundleGC.7z ./*
          sudo rm -rf ./*/

      - name: Upload file list
        uses: actions/upload-artifact@v4
        with: 
          name: BundleGC
          path: BundleGC.7z.*

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Commit and Push Changes
        env:
          GH_COMMIT: ${{ secrets.GH_COMMIT }}
        run: |
          git add gameList
          git commit -m "Automated commit: Updating gameList"
          git push https://x-access-token:$GH_COMMIT@github.com/${{ github.repository }}.git HEAD:main
